// types generated by quicktype during postinstall phase
import { OpenAttestationDocument as OpenAttestationDocumentV2 } from "../../__generated__/schema.2.0";
import { OpenAttestationDocument as OpenAttestationDocumentV3 } from "../../__generated__/schema.3.0";
import { OpenAttestationDocument as OpenAttestationDocumentV4 } from "../../__generated__/oa-schema.4.0";
import { TradeTrustDocument as TradeTrustDocumentV4 } from "../../__generated__/tt-schema.4.0";
import {
  SignedWrappedDocument as SignedWrappedDocumentV2,
  WrappedDocument as WrappedDocumentV2,
} from "../../2.0/types";
import {
  SignedWrappedDocument as SignedWrappedDocumentV3,
  WrappedDocument as WrappedDocumentV3,
} from "../../3.0/types";
import {
  SignedWrappedDocument as OASignedWrappedDocumentV4,
  WrappedDocument as OAWrappedDocumentV4,
} from "../../4.0/oa/types";
import {
  SignedWrappedDocument as TTSignedWrappedDocumentV4,
  WrappedDocument as TTWrappedDocumentV4,
} from "../../4.0/tt/types";
import { Literal, Static, String } from "runtypes";
import { ethers } from "ethers";

export type OpenAttestationDocument =
  | OpenAttestationDocumentV2
  | OpenAttestationDocumentV3
  | OpenAttestationDocumentV4
  | TradeTrustDocumentV4;
export type WrappedDocument<T extends OpenAttestationDocument> = T extends OpenAttestationDocumentV2
  ? WrappedDocumentV2<T>
  : T extends OpenAttestationDocumentV3
  ? WrappedDocumentV3<T>
  : T extends OpenAttestationDocumentV4
  ? OAWrappedDocumentV4<T>
  : T extends TradeTrustDocumentV4
  ? TTWrappedDocumentV4<T>
  : unknown;
export type SignedWrappedDocument<T extends OpenAttestationDocument> = T extends OpenAttestationDocumentV2
  ? SignedWrappedDocumentV2<T>
  : T extends OpenAttestationDocumentV3
  ? SignedWrappedDocumentV3<T>
  : T extends OpenAttestationDocumentV4
  ? OASignedWrappedDocumentV4<T>
  : T extends TradeTrustDocumentV4
  ? TTSignedWrappedDocumentV4<T>
  : unknown;

export enum SchemaId {
  v2 = "https://schema.openattestation.com/2.0/schema.json",
  v3 = "https://schema.openattestation.com/3.0/schema.json",
  oa_v4 = "https://schemata.openattestation.com/com/openattestation/4.0/alpha-schema.json",
  tt_v4 = "https://schemata.tradetrust.io/io/tradetrust/4.0/alpha-schema.json",
  // Note: Schema property is no longer placed in the OA v4
  // document
}

export enum ContextUrl {
  oa_v4_alpha = "https://schemata.openattestation.com/com/openattestation/4.0/alpha-context.json",
  tt_v4_alpha = "https://schemata.tradetrust.io/io/tradetrust/4.0/alpha-context.json",
}

export const OpenAttestationHexString = String.withConstraint(
  (value) => ethers.utils.isHexString(`0x${value}`, 32) || `${value} has not the expected length of 32 bytes`
);
export const TradeTrustHexString = String.withConstraint(
  (value) => ethers.utils.isHexString(`0x${value}`, 32) || `${value} has not the expected length of 32 bytes`
);

export const SignatureAlgorithm = Literal("OpenAttestationMerkleProofSignature2018");
export type SignatureAlgorithm = Static<typeof SignatureAlgorithm>;
export const ProofType = Literal("OpenAttestationSignature2018");
export type ProofType = Static<typeof ProofType>;
export const TradeTrustSignatureAlgorithm = Literal("TradeTrustMerkleProofSignature2018");
export type TradeTrustSignatureAlgorithm = Static<typeof SignatureAlgorithm>;
export const TradeTrustProofType = Literal("TradeTrustSignature2018");
export type TradeTrustProofType = Static<typeof ProofType>;
export const ProofPurpose = Literal("assertionMethod");
export type ProofPurpose = Static<typeof ProofPurpose>;
